{"ast":null,"code":"var _jsxFileName = \"/Users/Ivan/Desktop/test4/boards-api/boards-app/src/components/Board.js\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport update from \"immutability-helper\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { withRouter } from \"react-router\";\nimport EdiText from 'react-editext';\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport Sortable from 'sortablejs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n\n    this.reloadColumns = () => {\n      this.setState({\n        columns: [],\n        cards: [],\n        board: null\n      });\n      this.loadColumns();\n    };\n\n    this.newColumn = (e, id) => {\n      if (e.key === \"Enter\" && !(e.target.value === \"\")) {\n        axios.post(`/api/v1/board_columns`, {\n          board_column: {\n            title: e.target.value,\n            board_id: id\n          }\n        }).then(res => {\n          this.reloadColumns();\n          this.setState({\n            inputValue: \"\"\n          });\n        }).catch(error => console.log(error));\n      }\n    };\n\n    this.newCard = (e, column_id, id) => {\n      if (e.key === \"Enter\" && !(e.target.value === \"\")) {\n        axios.post(`/api/v1/cards`, {\n          card: {\n            title: e.target.value,\n            board_column_id: column_id,\n            board_id: id\n          }\n        }).then(res => {\n          this.reloadColumns();\n          this.setState({\n            inputValue: \"\"\n          });\n        }).catch(error => console.log(error));\n      }\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        inputValue: e.target.value\n      });\n    };\n\n    this.removeColumn = id => {\n      axios.delete(`/api/v1/board_columns/${id}`).then(res => {\n        const columnIndex = this.state.columns.findIndex(x => x.id === id);\n        const columns = update(this.state.columns, {\n          $splice: [[columnIndex, 1]]\n        });\n        this.setState({\n          columns: columns\n        }); // this.reloadColumns();\n      }).catch(error => console.log(error));\n    };\n\n    this.removeCard = id => {\n      axios.delete(`/api/v1/cards/${id}`).then(res => {\n        const cardIndex = this.state.cards.findIndex(x => x.id === id);\n        const cards = update(this.state.cards, {\n          $splice: [[cardIndex, 1]]\n        });\n        this.setState({\n          cards: cards\n        });\n      }).catch(error => console.log(error));\n    };\n\n    this.modifyCard = (value, id) => {\n      if (!(value === \"\")) {\n        axios.put(`/api/v1/cards/${id}`, {\n          card: {\n            title: value\n          }\n        }).then(res => {\n          const cardIndex = this.state.cards.findIndex(x => x.id === res.data.id);\n          const cards = update(this.state.cards, {\n            [cardIndex]: {\n              $set: res.data\n            }\n          });\n          this.setState({\n            cards: cards\n          }); // this.reloadColumns();\n        }).catch(error => console.log(error));\n      }\n    };\n\n    this.state = {\n      columns: [],\n      cards: [],\n      board: null\n    };\n  }\n\n  loadColumns() {\n    const link = this.props.match.params.link;\n    axios.get(`/api/v1/board/${link}`).then(res => {\n      this.setState({\n        board: res.data\n      });\n      axios.get(`/api/v1/board_columns`, {\n        params: {\n          board_id: res.data.id\n        }\n      }).then(res => {\n        this.setState({\n          columns: res.data\n        });\n        res.data.forEach(column => {\n          axios.get(`/api/v1/cards`, {\n            params: {\n              board_column_id: column.id\n            }\n          }).then(res => {\n            const newCards = this.state.cards.concat(res.data);\n            this.setState({\n              cards: newCards\n            });\n          });\n        });\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.loadColumns();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(DragDropContext, {\n      children: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"taskContainer\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"newColumn\",\n            type: \"text\",\n            placeholder: \"Input a New Column and Press Enter\",\n            maxLength: \"75\",\n            onKeyPress: event => this.newColumn(event, this.state.board.id),\n            value: this.state.inputValue,\n            onChange: this.handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"board\",\n          children: this.state.columns.map(column => {\n            const Cards = this.state.cards.filter(card => card.board_column_id === column.id);\n            return /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: /*#__PURE__*/_jsxDEV(\"ul\", {\n                class: \"board-col\",\n                children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                  class: \"board-col-name\",\n                  children: [column.title, /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"removeItemButton\",\n                    onClick: e => this.removeColumn(column.id),\n                    children: \"x\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 163,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 161,\n                  columnNumber: 19\n                }, this), Cards.sort((a, b) => a.position - b.position).map(card => {\n                  return /*#__PURE__*/_jsxDEV(_Fragment, {\n                    children: /*#__PURE__*/_jsxDEV(\"li\", {\n                      class: \"board-col-item\",\n                      children: [/*#__PURE__*/_jsxDEV(EdiText, {\n                        showButtonsOnHover: true,\n                        submitOnEnter: true,\n                        cancelOnEscape: true,\n                        editOnViewClick: true,\n                        type: \"text\",\n                        value: card.title,\n                        onSave: event => this.modifyCard(event, card.id)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 168,\n                        columnNumber: 25\n                      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"removeItemButton\",\n                        onClick: e => this.removeCard(card.id),\n                        children: \"x\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 177,\n                        columnNumber: 25\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 167,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false);\n                }), /*#__PURE__*/_jsxDEV(\"input\", {\n                  className: \"newCard\",\n                  type: \"text\",\n                  placeholder: \"New Card\",\n                  maxLength: \"75\",\n                  onKeyPress: event => this.newCard(event, column.id),\n                  value: this.state.inputValue,\n                  onChange: this.handleChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 182,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 17\n              }, this)\n            }, void 0, false);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/boards\",\n            children: \"Back\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/Ivan/Desktop/test4/boards-api/boards-app/src/components/Board.js"],"names":["React","Component","axios","update","Link","useParams","withRouter","EdiText","DragDropContext","Droppable","Draggable","Sortable","Board","constructor","props","reloadColumns","setState","columns","cards","board","loadColumns","newColumn","e","id","key","target","value","post","board_column","title","board_id","then","res","inputValue","catch","error","console","log","newCard","column_id","card","board_column_id","handleChange","removeColumn","delete","columnIndex","state","findIndex","x","$splice","removeCard","cardIndex","modifyCard","put","data","$set","link","match","params","get","forEach","column","newCards","concat","componentDidMount","render","event","map","Cards","filter","sort","a","b","position"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport update from \"immutability-helper\";\nimport { Link, useParams} from \"react-router-dom\";\nimport { withRouter } from \"react-router\";\nimport EdiText from 'react-editext'\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport Sortable from 'sortablejs';\n\nclass Board extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          columns: [],\n          cards: [],\n          board: null\n        };\n    }\n\n    loadColumns() {\n        const link = this.props.match.params.link;\n        axios \n          .get(`/api/v1/board/${link}`)\n          .then((res) => {\n            this.setState({ board: res.data });\n            axios\n            .get(`/api/v1/board_columns`, { params: {board_id: res.data.id} })\n            .then((res) => {\n              this.setState({ columns: res.data });\n              res.data.forEach((column) => {\n                axios\n                .get(`/api/v1/cards`, { params: {board_column_id: column.id} })\n                .then((res) => {\n                    const newCards = this.state.cards.concat(res.data)\n                    this.setState({cards: newCards})\n                  })\n                })\n              })\n            })\n    }\n\n    reloadColumns = () => {\n        this.setState({ columns: [], cards: [], board: null });\n        this.loadColumns();\n      };\n    \n    newColumn = (e, id) => {\n        if (e.key === \"Enter\" && !(e.target.value === \"\")) {\n            axios\n              .post(`/api/v1/board_columns`, { board_column: { title: e.target.value, board_id: id} })\n              .then((res) => {\n                this.reloadColumns();\n        \n                this.setState({\n                  inputValue: \"\",\n                });\n              })\n              .catch((error) => console.log(error));\n            }\n    };\n\n    newCard = (e, column_id, id) => {\n        if (e.key === \"Enter\" && !(e.target.value === \"\")) {\n            axios\n              .post(`/api/v1/cards`, { card: { title: e.target.value, board_column_id: column_id, board_id: id} })\n              .then((res) => {\n                this.reloadColumns();\n        \n                this.setState({\n                  inputValue: \"\",\n                });\n              })\n              .catch((error) => console.log(error));\n            }\n    };\n\n    handleChange = (e) => {\n\t\tthis.setState({inputValue: e.target.value});\n\t  }\n\n\n    removeColumn = ( id ) => {\n        axios \n            .delete(`/api/v1/board_columns/${id}`)\n            .then((res) => {\n                const columnIndex = this.state.columns.findIndex((x) => x.id === id);\n                const columns = update(this.state.columns, {\n                  $splice: [[columnIndex, 1]],\n                });\n                this.setState({\n                    columns: columns,\n                });\n                // this.reloadColumns();\n                \n              })\n              .catch((error) => console.log(error));\n    };\n\n    removeCard = ( id ) => {\n        axios\n            .delete(`/api/v1/cards/${id}`)\n            .then((res) => {\n              const cardIndex = this.state.cards.findIndex((x) => x.id === id);\n              const cards = update(this.state.cards, {\n                $splice: [[cardIndex, 1]],\n              });\n              this.setState({\n                cards: cards,\n              });\n            })\n            .catch((error) => console.log(error));\n    };\n\n\n    componentDidMount() {\n        this.loadColumns();\n    }\n\n\n    modifyCard= (value, id) => {\n      if (!(value === \"\")) {\n          axios\n              .put(`/api/v1/cards/${id}`, { card: { title: value} })\n              .then((res) => {\n                const cardIndex = this.state.cards.findIndex(\n                  (x) => x.id === res.data.id\n                );\n                const cards = update(this.state.cards, {\n                  [cardIndex]: { $set: res.data },\n                });\n                this.setState({\n                  cards: cards,\n                });\n\n                  // this.reloadColumns();\n              })\n              .catch((error) => console.log(error));\n      }\n  };\n\n    render() {\n        return (\n          <DragDropContext>\n          <>\n          <div className=\"taskContainer\">\n            <input\n              className=\"newColumn\"\n              type=\"text\"\n              placeholder=\"Input a New Column and Press Enter\"\n              maxLength=\"75\"\n              onKeyPress={(event) => this.newColumn(event, this.state.board.id)}\n              value={this.state.inputValue}\n              onChange={this.handleChange}\n            />\n          </div>\n            <div class=\"board\">  \n            {this.state.columns.map((column) => {\n              const Cards = this.state.cards.filter((card) => card.board_column_id === column.id);\n              return <>\n                <ul class=\"board-col\">\n                  <li class=\"board-col-name\">\n                    {column.title}\n                    <span className=\"removeItemButton\" onClick={(e) => this.removeColumn(column.id)}>x</span>\n                  </li>\n                  {Cards.sort((a,b) => a.position - b.position).map((card) => {\n                    return <>\n                      <li class=\"board-col-item\">\n                        <EdiText\n                            showButtonsOnHover\n                            submitOnEnter\n                            cancelOnEscape\n                            editOnViewClick={true}\n                            type='text'\n                            value={card.title}\n                            onSave={(event) => this.modifyCard(event, card.id)}\n                        />\n                        <span className=\"removeItemButton\" onClick={(e) => this.removeCard(card.id)}>x</span>\n                      </li>\n                      \n                    </>;\n                  })}\n                  <input\n                            className=\"newCard\"\n                            type=\"text\"\n                            placeholder=\"New Card\"\n                            maxLength=\"75\"\n                            onKeyPress={(event) => this.newCard(event, column.id)}\n                            value={this.state.inputValue}\n                            onChange={this.handleChange}\n                        />\n                </ul>\n              </>;\n            })}\n          </div>\n          <div>\n              <Link to=\"/boards\">Back</Link>\n          </div></>\n          </DragDropContext>\n        );\n    }\n    \n\n\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}