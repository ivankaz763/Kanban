{"ast":null,"code":"var _jsxFileName = \"/Users/Ivan/\\u0440\\u0430\\u0431\\u043E\\u0438\\u0447\\u0438\\u0306 \\u0441\\u0442\\u043E\\u043B/test4/boards-api/boards-app/src/components/ColumnCardContainer.js\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport update from \"immutability-helper\";\nimport { Board } from \"./Board\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ColumnCardContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.reloadColumns = () => {\n      this.setState({\n        columns: [],\n        cards: [],\n        board: null\n      });\n      this.loadColumns();\n    };\n\n    this.newColumn = (e, id) => {\n      if (e.key === \"Enter\" && !(e.target.value === \"\")) {\n        axios.post(`/api/v1/board_columns`, {\n          board_column: {\n            title: e.target.value,\n            board_id: id\n          }\n        }).then(res => {\n          const columns = update(this.state.columns, {\n            $push: [res.data]\n          });\n          this.setState({\n            columns: columns,\n            inputValue: \"\"\n          });\n        }).catch(error => console.log(error));\n      }\n    };\n\n    this.newCard = (e, id) => {\n      if (e.key === \"Enter\" && !(e.target.value === \"\")) {\n        axios.post(`/api/v1/cards`, {\n          cards: {\n            title: e.target.value,\n            board_column_id: id\n          }\n        }).then(res => {\n          const cards = update(this.state.cards, {\n            $push: [res.data]\n          });\n          this.setState({\n            cards: cards,\n            inputValue: \"\"\n          });\n          this.reloadColumns();\n        }).catch(error => console.log(error));\n      }\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        inputValue: e.target.value\n      });\n    };\n\n    this.removeColumn = id => {\n      axios.delete(`/api/v1/board_columns/${id}`).then(res => {\n        const columnIndex = this.state.columns.findIndex(x => x.id === id);\n        const columns = update(this.state.columns, {\n          $splice: [[columnIndex, 1]]\n        });\n        this.setState({\n          columns: columns\n        });\n      }).catch(error => console.log(error));\n    };\n\n    this.removeCard = (id, position, column_id) => {\n      axios.delete(`/api/v1/cards/${id}`, {\n        cards: {\n          position: position,\n          board_column_id: column_id\n        }\n      }).then(res => {\n        const cardIndex = this.state.cards.findIndex(x => x.id === id);\n        const cards = update(this.state.cards, {\n          $splice: [[cardIndex, 1]]\n        });\n        this.setState({\n          cards: cards\n        });\n      }).catch(error => console.log(error));\n    };\n\n    this.modifyCard = (value, id) => {\n      axios.put(`/api/v1/cards/${id}`, {\n        cards: {\n          title: value\n        }\n      }).then(res => {\n        const cardIndex = this.state.cards.findIndex(x => x.id === res.data.id);\n        const cards = update(this.state.cards, {\n          [cardIndex]: {\n            $set: res.data\n          }\n        });\n        this.setState({\n          cards: cards\n        });\n      }).catch(error => console.log(error));\n    };\n\n    this.cardMove = (id, position, board_column_id) => {\n      axios.put(`/api/v1/cards/move/${id}`, {\n        cards: {\n          position: position,\n          board_column_id: board_column_id\n        }\n      }).then(res => {\n        this.reloadColumns();\n      }).catch(error => console.log(error));\n    };\n\n    this.cardMoveLeft = (id, position, board_column_id) => {\n      axios.put(`/api/v1/cards/move_left/${id}`, {\n        cards: {\n          position: position,\n          board_column_id: board_column_id\n        }\n      }).then(res => {\n        this.reloadColumns();\n      }).catch(error => console.log(error));\n    };\n\n    this.cardMoveRight = (id, position, board_column_id) => {\n      axios.put(`/api/v1/cards/move_right/${id}`, {\n        cards: {\n          position: position,\n          board_column_id: board_column_id\n        }\n      }).then(res => {\n        this.reloadColumns();\n      }).catch(error => console.log(error));\n    };\n\n    this.state = {\n      columns: [],\n      cards: [],\n      board: null\n    };\n  }\n\n  loadColumns() {\n    const link = this.props.match.params.link;\n    axios.get(`/api/v1/boards/${link}`).then(res => {\n      this.setState({\n        board: res.data\n      });\n      axios.get(`/api/v1/board_columns`, {\n        params: {\n          board_id: res.data.id\n        }\n      }).then(res => {\n        this.setState({\n          columns: res.data\n        });\n        res.data.forEach(column => {\n          axios.get(`/api/v1/cards`, {\n            params: {\n              board_column_id: column.id\n            }\n          }).then(res => {\n            const newCards = this.state.cards.concat(res.data);\n            this.setState({\n              cards: newCards\n            });\n          });\n        });\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.loadColumns();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Board, {\n      board: this.state.board,\n      columns: this.state.columns,\n      cards: this.state.cards,\n      reloadColumns: this.reloadColumns,\n      newColumn: this.newColumn,\n      newCard: this.newCard,\n      handleChange: this.handleChange,\n      removeColumn: this.removeColumn,\n      removeCard: this.removeCard,\n      modifyCard: this.modifyCard,\n      inputValue: this.state.inputValue,\n      cardMove: this.cardMove,\n      cardMoveLeft: this.cardMoveLeft,\n      cardMoveRight: this.cardMoveRight\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n\nexport default ColumnCardContainer;","map":{"version":3,"sources":["/Users/Ivan/рабоичй стол/test4/boards-api/boards-app/src/components/ColumnCardContainer.js"],"names":["React","Component","axios","update","Board","ColumnCardContainer","constructor","props","reloadColumns","setState","columns","cards","board","loadColumns","newColumn","e","id","key","target","value","post","board_column","title","board_id","then","res","state","$push","data","inputValue","catch","error","console","log","newCard","board_column_id","handleChange","removeColumn","delete","columnIndex","findIndex","x","$splice","removeCard","position","column_id","cardIndex","modifyCard","put","$set","cardMove","cardMoveLeft","cardMoveRight","link","match","params","get","forEach","column","newCards","concat","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport update from \"immutability-helper\";\nimport {Board} from \"./Board\";\n\nclass ColumnCardContainer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          columns: [],\n          cards: [],\n          board: null\n        };\n    }\n\n    loadColumns() {\n        const link = this.props.match.params.link;\n        axios \n          .get(`/api/v1/boards/${link}`)\n          .then((res) => {\n            this.setState({ board: res.data });\n            axios\n            .get(`/api/v1/board_columns`, { params: {board_id: res.data.id} })\n            .then((res) => {\n              this.setState({ columns: res.data });\n              res.data.forEach((column) => {\n                axios\n                .get(`/api/v1/cards`, { params: {board_column_id: column.id} })\n                .then((res) => {\n                    const newCards = this.state.cards.concat(res.data)\n                    this.setState({cards: newCards})\n                  })\n                })\n              })\n            })\n    }\n\n    reloadColumns = () => {\n        this.setState({ columns: [], cards: [], board: null });\n        this.loadColumns();\n      };\n\n    \n    newColumn = (e, id) => {\n        if (e.key === \"Enter\" && !(e.target.value === \"\")) {\n            axios\n              .post(`/api/v1/board_columns`, { board_column: { title: e.target.value, board_id: id} })\n              .then((res) => {\n                const columns = update(this.state.columns, {\n                  $push: [res.data],\n                });     \n                this.setState({\n                  columns: columns,\n                  inputValue: \"\",\n                });\n              })\n              .catch((error) => console.log(error));\n            }\n    };\n\n    newCard = (e, id) => {\n        if (e.key === \"Enter\" && !(e.target.value === \"\")) {\n            axios\n              .post(`/api/v1/cards`, { cards: { title: e.target.value, board_column_id: id} })\n              .then((res) => {\n                const cards = update(this.state.cards, {\n                  $push: [res.data],\n                }); \n        \n                this.setState({\n                  cards: cards,\n                  inputValue: \"\",\n                });\n                this.reloadColumns();\n              })\n              .catch((error) => console.log(error));\n            }\n    };\n\n    handleChange = (e) => {\n\t\tthis.setState({inputValue: e.target.value});\n\t  }\n\n\n    removeColumn = ( id ) => {\n        axios \n            .delete(`/api/v1/board_columns/${id}`)\n            .then((res) => {\n                const columnIndex = this.state.columns.findIndex((x) => x.id === id);\n                const columns = update(this.state.columns, {\n                  $splice: [[columnIndex, 1]],\n                });\n                this.setState({\n                    columns: columns,\n                });    \n              })\n              .catch((error) => console.log(error));\n    };\n\n    removeCard = ( id, position, column_id) => {\n        axios\n            .delete(`/api/v1/cards/${id}`, { cards: { position: position, board_column_id: column_id} })\n            .then((res) => {\n              const cardIndex = this.state.cards.findIndex((x) => x.id === id);\n              const cards = update(this.state.cards, {\n                $splice: [[cardIndex, 1]],\n              });\n              this.setState({\n                cards: cards,\n              });\n            })\n            .catch((error) => console.log(error));\n    };\n\n\n    componentDidMount() {\n        this.loadColumns();\n    }\n\n    modifyCard= (value, id) => {\n          axios\n              .put(`/api/v1/cards/${id}`, { cards: { title: value} })\n              .then((res) => {\n                const cardIndex = this.state.cards.findIndex(\n                  (x) => x.id === res.data.id\n                );\n                const cards = update(this.state.cards, {\n                  [cardIndex]: { $set: res.data },\n                });\n                this.setState({\n                  cards: cards,\n                });\n              })\n              .catch((error) => console.log(error));\n  };\n\n  cardMove= (id, position, board_column_id) => {\n    axios \n      .put(`/api/v1/cards/move/${id}`, { cards: { position: position, board_column_id: board_column_id} })\n      .then((res) => {\n        this.reloadColumns();\n      })\n      .catch((error) => console.log(error));\n  };\n\n  cardMoveLeft = (id, position, board_column_id) => {\n    axios \n    .put(`/api/v1/cards/move_left/${id}`, { cards: { position: position, board_column_id: board_column_id} })\n    .then((res) => {\n      this.reloadColumns();\n    })\n    .catch((error) => console.log(error));\n  }\n  cardMoveRight = (id, position, board_column_id) => {\n    axios \n    .put(`/api/v1/cards/move_right/${id}`, { cards: { position: position, board_column_id: board_column_id} })\n    .then((res) => {\n      this.reloadColumns();\n    })\n    .catch((error) => console.log(error));\n  }\n\n    render() {\n        return (\n          <Board\n              board={this.state.board}\n              columns={this.state.columns}\n              cards={this.state.cards}\n              reloadColumns={this.reloadColumns}\n              newColumn={this.newColumn}\n              newCard={this.newCard}\n              handleChange={this.handleChange}\n              removeColumn={this.removeColumn}\n              removeCard={this.removeCard}\n              modifyCard={this.modifyCard}\n              inputValue={this.state.inputValue}\n              cardMove={this.cardMove}\n              cardMoveLeft={this.cardMoveLeft}\n              cardMoveRight={this.cardMoveRight}\n              />\n        );\n    }\n    \n\n\n}\n\nexport default ColumnCardContainer;"]},"metadata":{},"sourceType":"module"}